[2018-02-16 16:26:14]     INFO --- Zipped file directory created!! (test3.py:81)
[2018-02-16 16:26:14]     INFO --- UnZipped file directory created!! (test3.py:89)
[2018-02-16 16:26:15]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:15]     INFO --- Log file is not present for 1 day (test3.py:105)
[2018-02-16 16:26:16]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:17]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:17]     INFO --- Log file is not present for 1 day (test3.py:105)
[2018-02-16 16:26:17]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:17]     INFO --- Log file is not present for 2 day (test3.py:105)
[2018-02-16 16:26:18]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:18]     INFO --- Log file is not present for 3 day (test3.py:105)
[2018-02-16 16:26:20]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:20]     INFO --- Log file is not present for 4 day (test3.py:105)
[2018-02-16 16:26:21]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:21]     INFO --- Log file is not present for 5 day (test3.py:105)
[2018-02-16 16:26:21]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:21]     INFO --- Log file is not present for 6 day (test3.py:105)
[2018-02-16 16:26:22]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:22]     INFO --- Log file is not present for 7 day (test3.py:105)
[2018-02-16 16:26:23]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:23]     INFO --- Log file is not present for 8 day (test3.py:105)
[2018-02-16 16:26:23]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:23]     INFO --- Log file is not present for 9 day (test3.py:105)
[2018-02-16 16:26:25]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:25]     INFO --- Log file is not present for 10 day (test3.py:105)
[2018-02-16 16:26:26]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:26]     INFO --- Log file is not present for 11 day (test3.py:105)
[2018-02-16 16:26:27]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:28]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:29]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:31]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:33]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:35]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:37]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:38]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:40]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:41]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:42]     INFO --- Retrieving zipped log file (test3.py:102)
[2018-02-16 16:26:42]     INFO --- log20030102.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:42]     INFO --- log20030212.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:42]     INFO --- log20030301.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:42]     INFO --- log20030401.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:43]     INFO --- log20030501.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:43]     INFO --- log20030601.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:43]     INFO --- log20030701.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:43]     INFO --- log20030801.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:43]     INFO --- log20030901.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:43]     INFO --- log20031001.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:43]     INFO --- log20031101.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:44]     INFO --- log20031201.csv successfully extracted to folder: unzippedfiles. (test3.py:119)
[2018-02-16 16:26:44]     INFO --- Graphical_images directory created!! (test3.py:138)
[2018-02-16 16:26:44]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:26:44]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:26:44]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:26:44]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:26:44]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:26:44]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:26:44]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:26:44]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:26:44]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:26:44]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:26:44]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:26:44]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:26:44]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:26:44]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:26:44]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:26:44]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:26:44]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:26:44]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:26:44]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:26:44]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:26:44]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:26:44]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:26:44]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:26:44]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:26:44]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:26:44]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:26:44]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:26:44]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:26:44]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:26:44]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:26:44]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:26:45]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:26:45]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:26:45]     INFO --- Anomalies analysis ended (test3.py:381)
[2018-02-16 16:26:45]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:26:45]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:26:45]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:26:45]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:26:46]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:26:46]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:26:46]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:26:46]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:26:46]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:26:46]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:26:46]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:26:46]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:26:46]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:26:46]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:26:46]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:26:46]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:26:46]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:26:46]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:26:46]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:26:46]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:26:46]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:26:46]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:26:46]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:26:46]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:26:46]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:26:46]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:26:46]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:26:46]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:26:46]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:26:46]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:26:46]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:26:46]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:26:46]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:26:46]     INFO --- Anomalies analysis ended (test3.py:381)
[2018-02-16 16:26:46]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:26:46]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:26:46]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:26:46]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:26:46]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:26:46]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:26:46]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:26:46]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:26:46]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:26:46]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:26:47]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:26:47]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:26:47]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:26:47]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:26:47]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:26:47]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:26:47]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:26:47]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:26:47]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:26:47]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:26:47]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:26:47]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:26:47]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:26:47]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:26:47]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:26:47]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:26:47]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:26:47]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:26:47]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:26:47]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:26:47]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:26:47]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:26:48]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:26:48]     INFO --- Anomalies analysis ended (test3.py:381)
[2018-02-16 16:26:49]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:26:49]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:26:49]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:26:49]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:26:49]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:26:49]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:26:49]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:26:49]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:26:49]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:26:50]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:26:51]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:26:52]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:26:52]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:26:53]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:26:53]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:26:53]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:26:53]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:26:53]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:26:53]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:26:53]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:26:53]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:26:53]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:26:54]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:26:54]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:26:54]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:26:54]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:26:54]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:26:54]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:26:54]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:26:54]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:26:54]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:26:54]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:26:55]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:26:55]     INFO --- Anomalies analysis ended (test3.py:381)
[2018-02-16 16:26:56]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:26:56]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:26:56]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:26:56]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:26:56]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:26:56]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:26:56]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:26:56]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:26:56]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:26:57]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:26:58]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:26:59]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:26:59]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:26:59]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:26:59]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:27:00]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:27:00]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:27:00]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:27:00]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:27:00]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:27:00]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:27:00]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:27:00]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:27:00]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:27:00]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:27:00]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:27:00]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:27:00]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:27:00]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:27:01]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:27:01]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:27:01]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:27:01]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:27:02]     INFO --- Anomalies analysis ended (test3.py:381)
[2018-02-16 16:27:02]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:27:02]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:27:02]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:27:02]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:27:02]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:27:02]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:27:02]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:27:02]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:27:02]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:27:03]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:27:03]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:27:03]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:27:03]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:27:03]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:27:03]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:27:04]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:27:04]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:27:04]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:27:04]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:27:04]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:27:04]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:27:04]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:27:04]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:27:04]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:27:04]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:27:04]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:27:04]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:27:04]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:27:04]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:27:04]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:27:04]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:27:04]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:27:05]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:27:05]     INFO --- Anomalies analysis ended (test3.py:381)
[2018-02-16 16:27:06]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:27:06]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:27:06]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:27:06]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:27:06]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:27:06]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:27:06]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:27:06]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:27:06]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:27:07]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:27:09]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:27:10]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:27:10]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:27:11]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:27:11]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:27:11]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:27:11]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:27:11]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:27:11]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:27:11]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:27:11]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:27:12]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:27:12]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:27:12]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:27:12]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:27:12]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:27:12]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:27:12]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:27:12]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:27:12]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:27:12]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:27:12]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:27:13]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:27:13]     INFO --- Anomalies analysis ended (test3.py:381)
[2018-02-16 16:27:14]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:27:14]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:27:14]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:27:14]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:27:14]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:27:14]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:27:14]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:27:14]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:27:14]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:27:15]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:27:16]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:27:17]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:27:17]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:27:17]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:27:17]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:27:17]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:27:17]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:27:17]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:27:17]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:27:18]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:27:18]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:27:18]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:27:18]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:27:18]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:27:18]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:27:18]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:27:18]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:27:18]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:27:18]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:27:18]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:27:18]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:27:18]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:27:19]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:27:19]     INFO --- Anomalies analysis ended (test3.py:381)
[2018-02-16 16:27:19]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:27:19]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:27:19]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:27:19]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:27:19]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:27:19]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:27:19]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:27:19]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:27:19]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:27:20]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:27:20]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:27:20]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:27:20]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:27:20]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:27:20]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:27:20]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:27:20]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:27:20]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:27:20]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:27:20]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:27:20]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:27:20]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:27:20]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:27:20]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:27:20]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:27:20]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:27:20]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:27:20]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:27:20]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:27:21]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:27:21]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:27:21]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:27:21]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:27:21]     INFO --- Anomalies analysis ended (test3.py:381)
[2018-02-16 16:27:22]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:27:22]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:27:22]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:27:22]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:27:22]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:27:22]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:27:22]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:27:22]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:27:22]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:27:22]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:27:23]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:27:23]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:27:23]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:27:23]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:27:23]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:27:23]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:27:23]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:27:23]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:27:23]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:27:24]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:27:24]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:27:24]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:27:24]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:27:24]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:27:24]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:27:24]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:27:24]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:27:24]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:27:24]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:27:24]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:27:24]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:27:24]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:27:25]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:27:25]     INFO --- Anomalies analysis ended (test3.py:381)
[2018-02-16 16:27:25]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:27:25]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:27:25]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:27:25]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:27:25]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:27:25]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:27:25]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:27:25]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:27:25]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:27:25]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:27:25]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:27:25]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:27:25]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:27:25]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:27:25]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:27:25]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:27:25]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:27:25]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:27:25]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:27:25]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:27:25]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:27:25]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:27:25]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:27:25]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:27:25]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:27:25]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:27:25]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:27:25]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:27:25]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:27:25]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:27:25]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:27:26]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:27:26]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:27:26]     INFO --- Anomalies analysis ended (test3.py:381)
[2018-02-16 16:27:27]     INFO --- Calculated the missing values in each coloumn (test3.py:142)
[2018-02-16 16:27:27]     INFO --- Finding the NaN values in each coloumn (test3.py:144)
[2018-02-16 16:27:27]     INFO --- Working on the Browser Coloumn (test3.py:145)
[2018-02-16 16:27:27]     INFO --- Grouping the values of all the browsers and storing in a dataframe (test3.py:148)
[2018-02-16 16:27:27]     INFO --- Counting the frequency of each browser type used in descending order (test3.py:151)
[2018-02-16 16:27:27]     INFO --- Selecting the brower at the index 0(as it will be the maximum used browser) (test3.py:154)
[2018-02-16 16:27:27]     INFO --- confirming that no NaN values are present on the browser coloumn (test3.py:157)
[2018-02-16 16:27:27]     INFO --- Working on the Size Coloumn (test3.py:158)
[2018-02-16 16:27:27]     INFO --- Replacing the file size for ext : txt, by the mean of all the file size corresponding to txt (test3.py:159)
[2018-02-16 16:27:27]     INFO --- Replacing the file size with NaN values for ext : htm, by the mean of all the file size corresponding to htm (test3.py:165)
[2018-02-16 16:27:28]     INFO --- Replacing the file size with NaN values for ext : xml, by the mean of all the file size corresponding to xml (test3.py:171)
[2018-02-16 16:27:29]     INFO --- To check how many NaN values are remaining  (test3.py:177)
[2018-02-16 16:27:29]     INFO --- Replacing the file size for rest of the files with the mean of file size of txt extension, as it is the max used (test3.py:178)
[2018-02-16 16:27:29]     INFO --- Working on all other coloumns (test3.py:181)
[2018-02-16 16:27:29]     INFO --- If cik,Accession,ip,date are empty fields drop the records (test3.py:182)
[2018-02-16 16:27:29]     INFO --- Calculating the max categorical value in other coloumns( code, zone,extention,idx,find) and filling the NaNs (test3.py:188)
[2018-02-16 16:27:29]     INFO --- Filling empty values with Categorical Values for coloumns (norefer,noagent,nocrawler) (test3.py:195)
[2018-02-16 16:27:29]     INFO --- Missing data is handled successfully (test3.py:200)
[2018-02-16 16:27:29]     INFO --- Calculating Summary metrics of clean data (test3.py:203)
[2018-02-16 16:27:29]     INFO --- To calculate which class of IP addresses(Class A, Class B , Class C) has done the maximum EDGAR fillings using mode (test3.py:206)
[2018-02-16 16:27:29]     INFO --- Mean and Median sizes for each Browser (test3.py:229)
[2018-02-16 16:27:30]     INFO --- Top 15 most searched CIKs with the count (test3.py:238)
[2018-02-16 16:27:30]     INFO --- Compute distinct count of ip per month i.e. per log file (test3.py:244)
[2018-02-16 16:27:30]     INFO --- Computing the count of status code on the basis of ip (test3.py:249)
[2018-02-16 16:27:30]     INFO --- Average of file size is computed (test3.py:256)
[2018-02-16 16:27:30]     INFO --- Number of request per day is computed (test3.py:260)
[2018-02-16 16:27:30]     INFO --- Mean of file size on the basis of code status (test3.py:264)
[2018-02-16 16:27:30]     INFO --- Summary metrics computed succesfully!! (test3.py:267)
[2018-02-16 16:27:30]     INFO --- graphical analysis started (test3.py:274)
[2018-02-16 16:27:30]     INFO --- graphical analysis end (test3.py:290)
[2018-02-16 16:27:30]     INFO --- graphical analysis started (test3.py:297)
[2018-02-16 16:27:30]     INFO --- graphical analysis end (test3.py:313)
[2018-02-16 16:27:30]     INFO --- Anomalies analysis started (test3.py:373)
[2018-02-16 16:27:31]     INFO --- Anomalies analysis ended (test3.py:381)
